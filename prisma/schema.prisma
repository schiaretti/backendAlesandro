// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model usuarios {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  nome  String
  senha String
  nivel String
  postes Postes[]
}


model Postes {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  numeroIdentificacao String  @unique
  usuario            usuarios @relation(fields: [usuarioId], references: [id])
  usuarioId          String   @db.ObjectId
  
  // Coordenadas principais do poste
  latitude           Float?
  longitude          Float?
  @@index([latitude, longitude], name: "coords_index")
  cidade             String
  endereco           String
  numero             String
  cep                String
  isLastPost         Boolean  @default(false)
  localizacao        String?
  
  // Dados técnicos (converti para tipos mais apropriados)
  emFrente           String?
  transformador      Boolean?
  medicao            Boolean?
  telecom            Boolean? 
  concentrador       Boolean?
  poste              String?
  alturaposte        Float?   // Melhor como número
  estruturaposte     String?
  tipoBraco          String?
  tamanhoBraco       Float?   // Melhor como número
  quantidadePontos   Int?     // Melhor como inteiro
  tipoLampada        String?
  potenciaLampada    Int?     // Melhor como inteiro (watts)
  tipoReator         String?
  tipoComando        String?
  tipoRede           String?
  tipoCabo           String?
  numeroFases        String?    
  tipoVia            String?
  hierarquiaVia      String?
  tipoPavimento      String?
  quantidadeFaixas   Int?     // Melhor como inteiro
  tipoPasseio        String?
  canteiroCentral    Boolean? // Melhor como booleano
  larguraCanteiro   Int?
  finalidadeInstalacao String?
  especieArvore      String?
  distanciaEntrePostes  Int?
  

  // Relações
  fotos              Foto[]
}

model Foto {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  tipo      FotoTipo
  
  // Coordenadas da foto (pode ser diferente do poste)
  fotoLatitude  Float?
  fotoLongitude Float?
  
  // Metadados específicos para árvores
  especieArvore String?
 
  
  // Relacionamento
  poste     Postes   @relation(fields: [posteId], references: [id])
  posteId   String   @db.ObjectId
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
 // Índice composto para buscar árvores por coordenadas + poste
  @@index([fotoLatitude, fotoLongitude, posteId], name: "foto_coords_index")
}

enum FotoTipo {
  PANORAMICA
  ARVORE
  LUMINARIA
  TELECOM
  LAMPADA
  OUTRO
}